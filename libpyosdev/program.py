"""
Module for program management
"""

import re
from libpyosdev.arch.infos import ArchitectureInfos

class Program:
    """
    Represents a program
    - `name`                            : name of the program
    - `output`                          : name of the output file
    - `code`                            : list that contains the generated code
    - `asm`                             : shortcut for `self.arch.instructions`
    - `regs`                            : shortcut for `self.arch.registers`
    - `generate_preamble()`             : generates the preamble of the program
    - `generate_line()`                 : generates a single line of code
    - `write()`                         : writes the generated code into a file
    """

    def __init__(self, name: str, arch: ArchitectureInfos, output: str="output.asm"):
        self.name = name
        self.arch = arch
        self.output = output
        self.code = []

        self.asm = self.arch.instructions
        self.asm.link_program(self)
        self.regs = self.arch.registers
        self.bios = self.arch.bios
        
        self.generate_preamble()

    def generate_preamble(self) -> None:
        """
        Generates the preamble of the program
        """

        self.asm.comment("This program has been generated by the pyosdevlib Python library")
        self.asm.comment("and is not intended to be edited")
        self.asm.comment("")

    def generate_line(self, line: str) -> None:
        """
        Generates a single line of code
        - `line`                        : the line to generate
        """

        self.code.append(line)

    def write(self, *args, **kwargs) -> None:
        """
        Writes the generated code into a file
        """

        methods = []
        for name in dir(self):
            match = re.match(r"_([0-9]+)_?.*", name)
            if match:
                number = int(match.group(1))
                methods.append((number, name))

        methods.sort(key=lambda t: t[0])

        for _, name in methods:
            method = getattr(self, name)
            method(*args, **kwargs)

        with open(self.output, "w") as file:
            file.write('\n'.join(self.code))